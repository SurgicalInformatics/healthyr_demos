I mentioned previously, Shiny is what we're going to be covering today. Shiny is a package that can be used in R, that is for making interactive web applications. They really useful for being able to share your results afterwards. And they can be made fairly simply, which is quite exciting. So I can't, just for the record, I can't really see the chat. So if anybody has any questions that they've typed, if anybody could show that to me, I'll keep eye to say that and I'll let you know. So you just a square rectangle in the middle of your screen? At the moment. Yeah, that was yeah, it should be gone. Yeah. Okay. So what I'm going to start with just now is just going to show you how you can get the R studio or the posit example of shiny web app, which will set us up nicely for this demo. Right now we've just got the usual R Studio IDE which has currently three panels, but about to be four panels that maybe recognise if you've used R before, if you've not used R before, you might not recognise the set up. But in the corner here. You scroll down to Shiny web, it opens up this, we'll call this demo. And then we'll just create this file here. Then that it's created a repository here called Healthy Demo One. In there, it's got this file app. And that's what's opened up here in our top left panel. Just for the sake of the demo, I'm going to quickly click Run App. Just so that you can see how quick and easy it is to create an app using Shiny, which is this package here. And then we'll talk through each of the parts and then we'll create our own. So I'm just going to quickly click Run app. I'm going to assume you can't see that pop up. I'm just going to share my full screen instead of just that. Good s again, there we go. So this is the app, sorry, it'll disappear in a second. This is the app that was just created with those lines of code. It's basically giving us this output of histogram showing the time to up the frequency of the time to eruptions. The interactive part here is that we can choose the number of bins that we want for our histogram. If we want some really granular data, we can scroll it all the way up to 50, and you can see that there's now 50 bars on our histogram, but if we don't really care about that, we can scroll it down. There is pretty cool. It's reactive. As soon as we change it, it updates just like, so cool. Okay, back to the code and how that works. It basically requires three components. It requires the UI, which is the user interface, what the user interacts with, with the app. And then it requires the server, which is if the UI is the front end, the server the back end, it's where all the coding and the work happens, the calculations. And then there's this final bit of code which is combining the UI and the server together to create your app. What we're going to do for this session is we are going to take this out of the box app that Posit has given us and we're going to create something that we want to create. Instead what I'm going to do is we're going to use the dataset that we have been using for the past couple of demos. In factor script, I'm just going to copy over the Factoring code that we used in the previous demos. Don't worry if you're a bit unsure about what this is showing. We've got a previous demo about how to work with factors, but basically we're using this data set here, which is a randomised control trial. Make bigger for looking at the outcome. Having throat pain, swallow pain, or a cough after thoratic surgery. And basically the randomised element is some patients got a licorice gargle and then some had a sugar gargle. That's the data that we're going to be using here. This is just quickly turning the variables into factors where we want them to be factors. Great, what I recommend first, before we try and create anything interactive, we're just going to create a static plot that we will eventually turn interactive. But we just want to make sure that we can get our data working. We're going to do a plot. Plots are more fun and pretty simple to do. Obviously, I should show shiny. Can get, there's lots of different examples. They can go from really basic things that we looked at with the eruptions, but then they can also become much more complicated. This example here, if it loads, there you go, can get much more complicated with colours and sizes and things like that. But we're just going to start with a basic plot. What I'm going to try and get out of this app is I'm going to plot the numbers of patients receiving the licorice gargle versus the sugar gargle as their treatment. Hopefully, I'm going to be able to change the outcome that I look at for the fill of the plot. But first I'm going to, by creating a basic plot, I'm going to start with Licodata. Do GG plot create our aesthetics? Our x axis is going to be treat factor, which is whether or not they got the licorice gargle. And our fill, I will start with just this outcome here about whether or not they had throat pain at 01:00 A.M. post operation. There we go. And I'll just add bar that, see if that works quickly. Well, I've not run Licodata. Instead I'll actually just click Run App and see if it works. Okay. So that is, this error here is saying that the CSV file that we're using isn't in the directory that we have just created. And that's because it's not, this is the data here that we're trying to use. It's looking for it in this directory which has the app that we're running, but it's not there. So I'm just going to move that to here. It should work. There we go. We can see that plot worked now is no longer connected to our interactive slider, but that's not what we were trying to do just then. We can see that we have created a plot having isn't necessarily that useful. It can be quite tricky when it raises the other levels off of the zero value. I might try and get rid of that quickly. Change the colour scheme because I'm true to riinu, I will make the background white as well. Skill, so this is just go, aesthetics unnecessary but just copy this, I just run again. And it's basically just prompted me that I should save before, that we update it. And there we go. It's gotten rid of the NAs and it's changed the colour scheme. You can change it however you like, but we'll just leave it there just now. Great. The next thing I'm going to do before update it, can you show where you ran the factoring script that you copied over? So that's been pasted at the top of that app file? Yes. So that sits out with the UI server functions. Yes. So good. So it all kind of Yeah, I'm not actually quite sure how that works. Could you explain, just so you can run any other scripts that you want within the file, but not included in the UI or the server portion. And the reason that that's important is it will only run once per session. Anything that was in the server block will run multiple times as people refresh the app or change the number of bins and the histogram, et cetera. If you've got something which is quite heavy going in the processing, computationally expensive, if you've got like a big data set that you're processing, it's best to have that running out with the server function which say showed because it will only run once in order to prepare the data rather than running frequently. Thank you. Great. Next we're going to change the UI so that we can then make it interact with the plot that we have just created. This is the UI here, not quite fitting there. This is the slider that we were using on the previous app. It starts, it goes 1-50 The value was the default value that it starts at, But we don't want a slider for the app that we are doing. What we want is some select option. Once again, I'm just going to show you shiny widgets here. These are all the options that you can use for an input. You can have multiple choices. You can type a number. Here's like a select option. The sliders that we saw, Any text here, depending on the app that you're making, change. What kind of input would you want to use for this example? I think we would be best suited to either some select box or radio buttons. Because I'm only going to make a few options, I'm going to use radio buttons. But if you had lots of options that you were selecting from a select box might look nicer to scroll down because you wouldn't want them all to automatically be displayed like this. I'm going to see code here, there we go in the UI, and it's this radio buttons that I would like going back here, I'm going to replace the slider with radio buttons. It can be quite picky with the brackets there just indented to make it look nicer. If I run this again, you'll be able to see that it's changed again. They're not connected, but we've got our radio buttons there, which is closer to what we are going to want next. I'm going to change the input to be what I want. Instead of this, I don't want to say choice. I want it to say throat pain, which is going to be from this variable here instead of one. Need it to be quoted. Choice to swallow pain. This first bit is the label, This is what we want it to say. You could be more detailed if you want swallow pain 01:00 A.M. you can have it say whatever you want it to say. That's not actually what swallow pain is, 30 minutes quote that and choice three, what call J. The selected is which one we want to start on. Which there might be an informative choice in the app that you're trying to make but shouldn't really matter. We will just start with this one fun. There we go. I will reload that app so you can see what it looks like, changed. You saw that it started on the swallow pain, but again, they're not connected yet. So it doesn't really matter it started on this title. I don't want anymore, this not being this title here is something else I would like to change here. That's the main title of the panel. I will change to Licorice Data. That other label, the smaller label three is just saying it's like a third header size. And I'll call this variable select once again. You see there was her have changed which looks good to getting close to what we want. In our UI, we have the radio buttons is the one part of the input and then the other bit is going to be our output in the main panel is going to be out plot that we're going to create. This is what we're saying we're going to call, I'm going to call it instead barplot_output. Then now we have to go back to here. And our output that we're creating is going to reflect here what we've said, we're going to call it. There we go. Now we're almost there with creating our interactive plot. But what we need to do is say in the fill, we want to be able to change what the colour is. We want to choose between either throat pain or swallow pain, or having a cough. We don't want this. Instead our input, which is what we're getting from the radio buttons, we want it to be input. We've currently called it radio here, we will call it radio and then the same here. That's intuitively what I automatically think I want. But this isn't going to quite work. I'll just run it to show the error. Basically, this is just, it's no longer doing the fill that we want. That's because this here is, it's keeping the quotations on. It's coming in with quotations. That doesn't really work well in the tidyverse in ggplot. We don't want the quotations round these variables here. The way to fix this is using this operator. Hadley Wickham calls it bang bang in reference to the two exclamation, exclamation marks. Then this is basically used for unquoting and turning the text into the symbol that we need it to. It's a bit strange, but it works. I'm putting the same there. Now save it, and we'll give it a go and see if it's works. There we go. So it doesn't actually look that different, but you can see that it is changing each time, which is what we wanted. Just the there we go. You could see how you would be able to implement that in various different ways if you had different plots that you wanted to show or different results. We've done that. I'm going to try now because we've got some spare time adding a different element to your output. We've got the, but what if we want a table underneath as well? Well, what we're going to do there is we are going to add another output in our UI main panel. This time we're going to call it a table output. We're going to call it anything we want to, but we'll call it tableOutput Don't forget that you have to add that, comma in there. Now we just have to create tableOutput. table_lico essentially. We put that in here. Again, we're creating our output, we called it table_lico, this time we're doing Render Table. Instead of render, you can see there all the different options that come with shiny if you wanted to just be a text output, plot and image. But we're going to use Render Table. Okay, we're going to use a finalfit table, summary factor list. Okay, so the dependent explanatory. For the explanatory we'll do taked up factor again for the input, we are going to again take the input from our radio buttons. Each time we change it, we change is we want it to be our interactive variable here. However, with final that and summary factualist we actually want the quoted variables. Instead of unquoting them, we're just going to put in the input that we get from our radio ones here without the bang bang function there. Then we're just going to save that and run it. There we go. We've got a table underneath that changes as we click through the variable we have, which I think is pretty cool. And all that was done in not that many lines of code. The actual app itself, starting on line 45 down to 90. In 45 lines of code. We've got an interactive app. Yeah, pretty easy. I think you can see how you could make it more complicated and more complex. There's apps where you could have a model that you're trying to send out to people and you can choose inputs for the model and see what maybe your predicted value is. Things like that can get more complicated at its core. Shiny is always just these three parts is pretty easy to get something functioning and fun and cool. You can customise it whatever way you would like. Yeah. Does anyone have any burning questions? It can be quite a lot and it can be a lot take in, but just playing around is quite a good way to be able to understand what's happening here. This would also work. What's nice about as always, not really a shiny demo, but can use a label here, that's a work. Oh right. Yes. Stupid. That's because it's a factor that needs the FF label. Not, not what I was doing. Sorry. There we go. Now the label is showed up there. Yeah. Cool. Okay. If there aren't any questions specifically about shiny, I will pause the recording and we can see if any other questions have come up. You want me to show three examples with the code of how we use it? Yeah, that'd be good. Could take 2 minutes. Is that showing? Okay. Yeah. Just to give you a couple of ideas about how this can be used. This is shiny Viz app and we can post the code for each of these. This automatically takes a dataset, excuse me, from Red Cap. It was last downloaded on the 29th this morning at 04:00 in the morning. Takes that dataset, does some pre processing, and then makes it available through a shiny app. This is Global Cohort Study, which is ongoing at the moment and allows in real time an exploration of the data that's coming in. The data don't matter, but this is country income level split by BMI and what type of surgery the individual was having, et cetera, and how urgent it was. This is really useful both in terms of exploring hypotheses, but also in assessing data validity or missingness, et cetera. And she's added various different things that you can use to alter that. You can take that underlying code and apply it to whatever it to set you want. I'll link to that, but it's in renews called Shiny is. The next one is called Shiny Fit. This is one that I did in the past. Rather than just looking at the variables stratified by different variables and counting them up. This is actually a regression. So that this is the final fit function as shiny app, you can put a dataset into it. You can specify your dependent variable here, mortality for instance. Then you can pick explanatory variables from the dataset, just as anyone who has used the final fit function. So these add into a final fit table with a univarable and a multivariable analysis. You can include model metrics. This is using the various different widgets which Sarah very nicely showed. You can subset the data on a particular available et cetera. Then you can have another tab which shows the plot, A tab which shows the summary factor list, and a tab that shows the glimpse of the data there you can share that somebody could do fully formed regression analysis with that. Then finally, the transplant benefits score, one that we did. This takes quite a complicated prediction score and uses various widgets in order to predict the benefit from transplant. And the details don't matter, but you can show that you can combine various different Widgets with an underlying dataset in order to give outputs could be used in order to guide care, I guess if you have MHR approval, et cetera. So I'll add the three Github repositories which describe those three example apps. I'll put it in the chat, but we will also put it beside the recording. Yeah, yeah, those are much more real life examples like you might not necessarily just have a plot that you want to change the variable of, but you can see how well that they could be applied in a real science communication capacity. Yeah, when I was playing around with Shy to decide to what to show for this demo, I tried to create one that was, it got a bit too complicated. But it was doing a similar thing. Not a similar thing at all. But it was like using a model to decide whether or not the person would be predicted to have throat pain. If they were like had severe disease, a high BMI, were quite old, if they're a current smoker, they might have throat pain, but otherwise, yeah. Anyway, yeah, lots of different ways that you could. Yeah, cool. If no one has any shiny questions, I will stop the recording here and I think someone has a clinic question that we can try and help with now.