Hello and welcome to another healthy r demo. Today's demo is on efficient ggplotting. What we mean by that is sometimes you might want to make a similar plot multiple times. It's like the same plot of multiple different variables and you might end up copy pasting a lot of code. We will show you how to create your own plotting function that will reduce what you need to copy paste. We are continuing using the same licorice gargle dataset that we've been using in the past a few demos. Stella, could you please just execute the first chunk? This code is copied from the factors demo a couple of weeks ago. Should look familiar. If it doesn't, the recording of the demo is up there. Maybe click on the dataset as well so that people who haven't seen it can see that. Can you go to the very end of the dataset? Because that's where the new variables are. So the babis we'll be plotting is the sex of the patients ASA. That's the general health factor, whether they received the treatment or the placebo which was a sugar water, and whether they were smoker. We will basically make four plots in a very efficient way. Can we please jump back to the Q empty mark? Yes, just hide that chunk. Firstly, we'll do a normal ggplot. A chunk please. And piped into GG plot, the aesthetic word plot in the underscore smoking factor. Yeah, factor we're using is bar. Yeah, that's the pop plot. And we'll now quickly apply a few modifications on the pop plot. U, I'm wondering, just based on the size of your screen, which is quite a good size screen, I think it might make sense to send the plot to the plot window so we can show people how to do that in the setting. The next to render, next to render, yeah, chunk output in console, this is confusing but to remove output, if you send output to the console, the console sends plots to the plot window. You can close the outline. You can see where it says outline, close that. Okay, that just because we have enough space for the plot and code to be side by side, we'll do a couple of nice modifications. I like to give my bar plots colourful outer edge. I'll show you what that means inside the par function. Please write fill equals seagreen3. 3, run that. Now do colour equals seagreen4. four. Fill is inside the bar and colour is the outer border. Obviously you could write a hundreds of different colour names in there or you could use it hex code, which is a universal way to denote colours. We've done that. This is what I've decided to go with today. Please add on the coord_flip, we're going to flip the coordinates. This is useful for long labels you want to read because now the words never past and current people can read them horizontally. They often fit better. I like plots and add on the theme classic as well, please. Okay, another modification we're going to do is we're going to put the actual count on the bars because at the moment you can see that there's probably like a 70 something non smokers and past smokers and 80 something current smokers. But the way to add on to the plot, this is quite a geom_ label. I'll tell you what the cool aesthetic label equals. After underscore stat. Yeah, like that. Not quoted. Brackets. Exactly. Yeah. After the aesthetic bracket, there's a lot of brackets, dot equals and this time count is quoted. Obviously, I copied this from online that we would you look at that in the past. People might have seen dot or you might have counted up your data before and then added it on some other way. This is the way to do it that they added in two years ago and they've deprecated dot, frankly was very confusing. This is the way to do it. Now, since we've been quite fast, I might as well assure you that you can also do calculations in there. For example, if you wanted to present the percentage count, go inside there please. After count, do divide, divide some brackets count. Yeah. Run that. You can see you can present the percentage rather than the actual count as well. If you pipe that into the scale sales percent. Yeah, Exactly. Look at that like that. Do I need non numeric? Yeah. Yeah. I think one of the brackets is Missing. Yeah, put bracket there. And then probably remove one from the end after. Yeah, let's try that. See inside percent, if you just type a number one, that gives an example of what you want the position to be, look at that. How cool is that, right? Finally, finally, please add on a Y lab and xlab, so plus ylab equals quoted n patients. It always confuses me because once you do coordinate the flip, it still knows. Yeah. Anyway, run it. Smokers or smoking. Yeah. Run that. Yeah. I almost always get it, the X and Y, but you know, it's trial and you can see what the But yeah. Right. Let's I think this is a fairly good looking plot. Now I want to make four of these. You could obviously just copy paste those ten or so lines. But then the issue with that is if you then end up making a change, you have to change it in all those four places so it makes your a bit lengthy, unnecessarily lengthy. We're just going to show you how to efficiently make that into a function and then copy it as a function. We'll show you how to do that. Please add the first line where it says licodata. Yeah, type in bar plot underscore. This is the name of the new. It could be any, it could be Stella. This is something you made up. This is not a function that already exists. Equals function brackets. Yeah, inside the function brackets, we will put two arguments. One is we'll call it DF data frame, comma VAR variable. Again, these are names that you made up, so you could call it something else. We're going to do curly brackets. Oh can you just do? The curly bracket needs to come immediately after the Yeah, exactly. I'm not even sure about that space, but basically, Yeah. Yeah, yeah, we're going to change Licodata to DF. So we're going to use whatever data frame is passed on from the argument. We're also going to change from pre smoking factor to Var. Now the only tricky bit here is that, that var inside aesthetic X needs to be in double curly brackets. Have you ever done double curly brackets before? Stella? No. Yeah. If you now this chunk, nothing happens. Well, if you remove the plot, can you remove the plot using the brush? Yeah, you run that chunk, this is a good one. I was going to demonstrate that to run that chunk. Normally R knows very well where the chunk is, but if you run it in the middle of the chunk, it doesn't capture the functions to the cursor. Has to be behind the ply bracket or on the first line. If you run that, it doesn't error. Nothing seemingly happens. But what happens is if you look at the environment and there's a new section called functions. If you click on that, you can see that this is what you've defined and this is now available for you to use throughout your document. Let's please now add in the new in that chunk. Use that function, type in bar plus, pluck as arguments, use licodata and the name of the smoking variable. It's not quoted. The reason we had to use double curly brackets, if you built the function that expected a quoted variable, then you wouldn't use double curly brackets to capture it inside the function. But because ggplot and mutate and dplyr and group by work on non quoted variables, that's where the double curly brackets come in for function building. Yeah, look at that. Still has now created the same plot using a single line, which means she can now copy that line and change the name of the variable to do all of the other plots, so I don't remember what the name was, but yeah, treat factor maybe? Yeah, pre-op ASA, treat and gender, that works. And that obviously these four lines are much neater than if she had copied all of the lines above. And if she makes a change above, now you have to remember to rerun the function again. And then you can do one obvious issue is that the label we had made the labelling to smoking inside when you run a function and easiest thing to do, ggplot allows you to overwrite a label. You could Stella go back down and where it says treatment treat factor plus X lab. Yeah, you could do further ggplot modifications. Yeah, it treatment. You could also, if you wanted to change the scale or colour colour trick, I'll show you colour differently. But if you were using a palette or something like that, she's now changed the treatment able. She could add that on. However, maybe to make it just a little bit neater instead of adding it on, which is absolutely fine, let's add it as an additional argument to the function. Yeah, exactly. We currently have two arguments, one is the data frame tibble, and the other one is the viable name. Add another final argument called X lab equals and make it empty by default, just empty brackets. Right now inside. Yeah. Let's just leave it there where it says smoking, Replace smoking with X lab. Exactly. That's exactly how it should be. It doesn't need the curly brackets because it's getting a normal string and it's not getting like a special ggplot variable. If you re run that again, nothing happens. Bar you can see if you run the smoking factor, the run that it takes away the X lab which sometimes is good, never past and current, they're not very clear but sometimes your variable is self explanatory. It might say never smoked, in which case you don't want the lab. But if you no added in as a third argument smoking, it reappears and similar. And now you can add that into all of the other ones as well. When you're used to using final fit, you're used to using FF label and then final fit plots and tables will automatically take the label off the column and use the label. Now GGlot is not capable of doing that. Ggplot will never automatically grab the label from the. Column ff_label or hmisc label or something like that. With ggplot, you do have to either manually label your variables or you could make your variable names nice and capitalised, but I would recommend that that's very confusing. Right. Stella very quickly. I don't know what this one is supposed to be. I don't actually. Yeah. Anyone want to show out what the acronym sounds for? It's how fit the patient is, but I can't remember what the acronym sounds for. You can you can just Google the ASA score, objective assessment of a patient's overall health based on five classes. Even that definition doesn't tell you what the letters stand for. Yeah. There. Right. Does anyone have any questions about this? Any suggestions for changes, requests for changes based on what we've just shown you? Do you want to render that file to see what it looks like? You see that still? Yeah. Yeah, we can. Obviously, in quiet options as we showed in I think November demos, you could hide the code and only adding nice text if you were sending this to someone who doesn't do. But basically this is how we quickly, quite efficiently created for plots. There are a couple of neat maybe tricks and changes I have noted that I'm happy to show you. But if anyone can think of any other things they would like to see do with these plots. Stella. If you jump back into the thing, go to barplot count again, please. A function I quite often use when I do barplot is fact in frequency. You put that around the double curly brackets. Type in FCT. Underscore infrequency. Yeah, exactly. Make the brackets. It's a lot of brackets but it's worth it. Okay. Save it. To run the function, you either have to run the whole chunk or you need to move your cursor to the e, to the first or last line. If you run into the middle, the function gets confused. Now go and create the ASA score plot again. For example, you can see that factor in frequency orders your bars based on the frequency they appear in the dataset. By default, if it's a factor, it gets plotted as the factor levels, which makes sense for ordinal variables. If it's not a factor, it will automatically plot it alphabetically. Factoring frequency enables you to tell it to do that, I often reverse it. I often like to have the common one at the top. If you now add in another thing, we should have probably piped actually. Yeah, I'm usually when I add in the single Yeah. Pipe that into factor in frequency and then pipe that into factor reverse and reverse. Just yeah, try that now we get that at the top, ggplot has a bit of an issue that it sometimes doesn't add enough space at the end of to see how the 57% is slightly cut off. There's two ways of doing that. We could increase the plot, which frankly I do a quite often or we can move the labels in. I think today I'm going to show moving the labels in, but if you definitely want to have a label that is slightly outward, is also possible to just extend the plot to move the tables inside the bars. Geom_label, after_stat count,  hjust equals and change it to one. That's horizontal justification that moves the labels around one on the plot together. Yeah, see that moves the labels to be inside the bars. You can horizontal justification is number between -1 and 1. Try minus one. Where it put it there just to remind myself. Okay. Minus one is put it too far. To the minus one puts it Yeah. On the other side. Too far. Yeah. Okay. Zero is if you want it at the end of the bar, minus word puts it even further. And one is if you want it to end count. Yeah, I think one made sense here in this case that solves our plot area issue. I like when bar plots of start from zero, I always add on at the bottom of where it says x label scale continuous and expand equals 00 and run that. Because you can see GG plot automatically adds padding and I like to especially remove the padding from the zero. Sometimes, especially if I do have labels that are extending, I will remove the padding from the one end only and add some padding at the other end. All right. You could also make the labels a bit bigger by going back to just do hjust comma, size equals 5. 5 is as good as numbers. Yeah, so now the labels are big. Has anyone thought of any other requests or questions they would want to see since we're doing that like a ggplot demo? Well, that is a demo that we actually kept to 30 minutes. Then I'm going to finish the demo recording and then we will take the one question, the clinic question we had, or if anyone thought of any other questions. I'll stop that. Thanks for watching.